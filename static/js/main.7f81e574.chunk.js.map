{"version":3,"sources":["graphQl/Queries.js","components/Searchbar/Searchbar.jsx","components/CountryInfo/CountryInfo.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["COUNTRY_BY_CODE","gql","CLIENT_COUNTRY_CODE","Searchbar","onChange","useQuery","data","loading","error","useState","value","setValue","placeHolderValue","disabled","placeholder","undefined","initSearchCode","client","ipAddress","country","alpha2Code","toUpperCase","Fragment","type","name","id","maxLength","target","list","className","countries","map","code","CountryInfo","length","number","population","toString","replace","continent","capital","currencies","currency","unitSymbols","languages","language","App","useLazyQuery","getCountryByCode","searchInput","variables","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errorLink","onError","graphqlErrors","networkError","message","location","path","console","link","from","HttpLink","uri","process","REACT_APP_EVERBASE_API_KEY","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.7f81e574.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const COUNTRY_BY_CODE = gql`\n  query countryByCode($code: String!) {\n    countries(where: { alpha2Code: { eq: $code } }) {\n      id\n      name\n      population\n      capital {\n        name\n      }\n      continent {\n        name\n      }\n      currencies {\n        id\n        name\n        unitSymbols\n      }\n      languages {\n        id\n        name\n      }\n    }\n  }\n`;\n\n// we query the country of the client and also get\n// all available alpha2Codes to facilitate the autocomplete\nexport const CLIENT_COUNTRY_CODE = gql`\n  query {\n    client {\n      ipAddress {\n        country {\n          alpha2Code\n        }\n      }\n    }\n    countries {\n      id\n      alpha2Code\n    }\n  }\n`;\n","import './Searchbar.css';\n\nimport { useQuery } from '@apollo/client';\nimport { CLIENT_COUNTRY_CODE } from '../../graphQl/Queries';\nimport React, { useState } from 'react';\n\nconst Searchbar = ({ onChange }) => {\n  const { data, loading, error } = useQuery(CLIENT_COUNTRY_CODE);\n  const [value, setValue] = useState();\n  const placeHolderValue = 'e.g. RU';\n\n  if (error) return <h1>Error..</h1>;\n\n  if (loading)\n    return <input disabled placeholder={placeHolderValue} value={''} />;\n\n  // if the value of input field is undefined, prefill it with the countrycode of the client,\n  // this also triggers the first query of the country itself in another component\n  if (value === undefined) {\n    const initSearchCode =\n      data.client.ipAddress.country.alpha2Code.toUpperCase();\n    setValue(initSearchCode);\n    onChange(initSearchCode);\n  }\n\n  const onSearchChange = ({ target }) => {\n    // switch case of new value\n    setValue(target.value.toUpperCase());\n\n    // push the value up\n    onChange(target.value.toUpperCase());\n  };\n\n  return (\n    <React.Fragment>\n      <input\n        type=\"text\"\n        name=\"searchbar\"\n        id=\"sbAlphaCode\"\n        placeholder={placeHolderValue}\n        maxLength=\"2\"\n        value={value}\n        onChange={onSearchChange}\n        list=\"alphaCodes\"\n        className=\"searchbar\"\n      />\n\n      <datalist id=\"alphaCodes\">\n        {data &&\n          data.countries.map((code) => (\n            <option value={code.alpha2Code} key={code.id} />\n          ))}\n      </datalist>\n    </React.Fragment>\n  );\n};\n\nexport default Searchbar;\n","import './CountryInfo.css';\nimport React from 'react';\n\nconst CountryInfo = ({ loading, data }) => {\n  if (!data || loading) return <div className=\"loader\"></div>;\n  if (data.countries.length === 0)\n    return <p className=\"notfound\">No country found ðŸ¤”</p>;\n\n  // Adds dots after 3 digits to better read the large population numbers\n  const formatInteger = (number) => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  };\n\n  return data.countries.map((country) => (\n    <div key={country.id} className=\"result\">\n      <h2>{country.name}</h2>\n      <p>\n        <b>Population: </b>\n        <span>{formatInteger(country.population)}</span>\n      </p>\n      <p>\n        <b>Continent: </b>\n        <span>{country.continent?.name}</span>\n      </p>\n      <p>\n        <b>Capital City: </b>\n        <span>{country.capital?.name}</span>\n      </p>\n      <p>\n        <b>Currency: </b>\n        <ul className=\"result__list\">\n          {country.currencies.map((currency) => (\n            <li key={currency.id}>\n              {currency.name} | {currency.unitSymbols}\n            </li>\n          ))}\n        </ul>\n      </p>\n      <p>\n        <b>Language: </b>\n        <ul className=\"result__list\">\n          {country.languages.map((language) => (\n            <li key={language.id}>{language.name}</li>\n          ))}\n        </ul>\n      </p>\n    </div>\n  ));\n};\n\nexport default CountryInfo;\n","import './App.css';\n\nimport { useLazyQuery } from '@apollo/client';\nimport Searchbar from '../Searchbar/Searchbar';\nimport { COUNTRY_BY_CODE } from '../../graphQl/Queries';\nimport CountryInfo from '../CountryInfo/CountryInfo';\n\nfunction App() {\n  const [getCountryByCode, { data, loading }] = useLazyQuery(COUNTRY_BY_CODE);\n\n  const onSearchChange = (searchInput) => {\n    // if the search is less then 2 characters, we can skip the query to the server\n    if (searchInput.length < 2) return;\n\n    getCountryByCode({\n      variables: { code: searchInput },\n    });\n  };\n  return (\n    <div>\n      <div className=\"searcharea\">\n        <h1>Trocket</h1>\n        <div className=\"wrapper\">\n          <p>Usless stuff about countries</p>\n          <Searchbar onChange={onSearchChange} />\n        </div>\n      </div>\n      <div className=\"wrapper\">\n        <CountryInfo data={data} loading={loading} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      console.error(`GraphQl error ${message}`);\n      return null;\n    });\n  }\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({\n    uri: `https://api.everbase.co/graphql?apikey=${process.env.REACT_APP_EVERBASE_API_KEY}`,\n  }),\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}